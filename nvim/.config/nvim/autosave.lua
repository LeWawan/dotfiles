-- local telescope = require('telescope.actions.mt')
--
-- local attach_to_buffer = function(output_bufnr, pattern, command)
--   vim.api.nvim_create_autocmd('BufWritePost', {
--     group = vim.api.nvim_create_augroup('AutocmdAutoBaby', { clear = true }),
--     pattern = pattern,
--     callback = function()
--       local append_data = function(_, data)
--         if data then
--           vim.api.nvim_buf_set_lines(output_bufnr, -1, -1, false, data)
--         end
--       end
--
--       vim.api.nvim_buf_set_lines(output_bufnr, 0, -1, false, {})
--
--       vim.fn.jobstart(command, {
--         stdout_buffred = true,
--         on_stdout = append_data,
--         on_stderr = append_data,
--       })
--     end,
--   })
-- end
--
-- vim.api.nvim_create_user_command('AutoRun', function()
--   print('AutoRun starts now...')
--   -- local newbuf = vim.api.nvim_create_buf(true, true)
--   -- vim.api.nvim_open_win(newbuf, false, {style='minimal', relative='editor', row=3, col=3, width=30, height=9, border='single'})
--   --vim.api.nvim_set_current_buf(newbuf)
--   telescope.transform_mod({
--     x = function(prompt_bufnr)
--       print('something ran' .. prompt_bufnr)
--     end
--   })
--   -- local bufnr = vim.fn.input 'Bufnr: '
--   -- local pattern = vim.fn.input 'Pattern: '
--   -- local pattern = 'test.ts'
--   -- local command = vim.split(vim.fn.input 'Command: ', ' ')
--   -- local command = 'ts-node test.ts'
--
--   -- attach_to_buffer(tonumber(newbuf), pattern, command)
-- end, {})
--
-- telescope.transform_mod({
--   x = function(prompt_bufnr)
--     print('something ran' .. prompt_bufnr)
--   end
-- })


